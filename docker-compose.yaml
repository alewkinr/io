version: '3'

networks:
  shared:
    external: false

volumes:
  pg-data:

services:
#  traefik:
#    image: traefik:v2.3
#    command: --api.insecure=true --providers.docker
#    networks:
#      - shared
#    volumes:
##      - "./infra/traefik/traefik.yaml:/etc/traefik/traefik.yaml"
##      - "./infra/traefik/dynamic.yaml:/etc/traefik/dynamic/dynamic.yaml"
#      - "/var/run/docker.sock:/var/run/docker.sock"


  postgres:
    image: postgres:10.5
    restart: always
    container_name: postgres
    networks:
      - shared
    volumes:
      - "./infra/postgres/data:/var/lib/postgresql/data"
    ports:
      - 5432:5432
    env_file:
      - ./infra/postgres/.env


  legal-db:
    image: postgres:10.5
    restart: always
    container_name: legal-db
    networks:
      - shared
    volumes:
      - "./infra/legal_db/data:/var/lib/postgresql/data"
    ports:
      - 6432:5432
    env_file:
      - ./infra/legal_db/.env


  license-supervisor:
    image: docker.pkg.github.com/alewkinr/io/license-supervisor:latest
    restart: always
    container_name: license-supervisor
    build:
      context: back/license-supervisor
      dockerfile: Dockerfile
    command: /supercronic /crontab
    networks:
      - shared
    volumes:
      - "./back/license-supervisor:/service"


  auth:
    image: docker.pkg.github.com/alewkinr/io/auth:latest
    build:
      context: back/auth-service
      dockerfile: Dockerfile
    container_name: auth
    restart: always
    depends_on:
      - postgres
    env_file:
      - back/auth-service/.env
    networks:
      - shared
    ports:
      - 9090:8080
    volumes:
    - "./back/auth-service:/service"
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.auth.rule=Host(`*`)"
#      - "traefik.http.services.auth.loadbalancer.server.port=8080"
#      - "traefik.http.routers.auth.rule=PathPrefix(`/auth`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)"
#      - "traefik.http.routers.auth.middlewares=cors@file,stripprefix@file"
#      - "traefik.http.routers.auth.entrypoints=web"


  upload:
    image: docker.pkg.github.com/alewkinr/io/upload:latest
    build:
      context: back/upload-service
      dockerfile: Dockerfile
    container_name: upload
    restart: always
    depends_on:
      - postgres
    env_file:
      - back/upload-service/.env
    networks:
      - shared
    ports:
      - 8080:8080
    volumes:
    - "./back/upload-service:/service"